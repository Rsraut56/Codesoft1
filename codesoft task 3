Task 3
#include <iostream>
#include <vector>

using namespace std;

vector<pair<string, bool>> tasks; 

void addTask(const string& taskName) {
    tasks.push_back({taskName, false}); 
}

void viewTasks() {
    if (tasks.empty()) {
        cout << "No tasks to display." << endl;
        return;
    }

    for (int i = 0; i < tasks.size(); i++) {
        string status = tasks[i].second ? "Completed" : "Pending";
        cout << "[" << i + 1 << "] " << tasks[i].first << " - " << status << endl;
    }
}

void markTaskCompleted(int taskIndex) {
    if (taskIndex < 0 || taskIndex >= tasks.size()) {
        cout << "Invalid task index." << endl;
        return;
    }

    tasks[taskIndex].second = true; 
}

void removeTask(int taskIndex) {
    if (taskIndex < 0 || taskIndex >= tasks.size()) {
        cout << "Invalid task index." << endl;
        return;
    }

    tasks.erase(tasks.begin() + taskIndex); 
}

int main() {
    while (true) {
        cout << "\nTo-Do List Manager" << endl;
        cout << "1. Add Task" << endl;
        cout << "2. View Tasks" << endl;
        cout << "3. Mark Task as Completed" << endl;
        cout << "4. Remove Task" << endl;
        cout << "5. Exit" << endl;

        int selection;
        cin >> selection;

        if (selection == 1) {
            string taskName;
            cout << "Enter task name: ";
            cin.ignore(); 
            getline(cin, taskName);
            addTask(taskName);
        } else if (selection == 2) {
            viewTasks();
        } else if (selection == 3) {
            int taskIndex;
            cout << "Enter task index to mark as completed: ";
            cin >> taskIndex;
            markTaskCompleted(taskIndex);
        } else if (selection == 4) {
            int taskIndex;
            cout << "Enter task index to remove: ";
            cin >> taskIndex;
            removeTask(taskIndex);
        } else if (selection == 5) {
            cout << "Exiting..." << endl;
            break;
        } else {
            cout << "Invalid selection. Please choose an option from 1 to 5." << endl;
        }
    }

    return 0;
}
